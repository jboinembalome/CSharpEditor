<MWindow:MetroWindow  x:Class="CSharpEditor.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:aeditCmd="clr-namespace:ICSharpCode.AvalonEdit;assembly=ICSharpCode.AvalonEdit"
        xmlns:textEditLib="clr-namespace:TextEditLib;assembly=TextEditLib"
        xmlns:textEditLibCmd="clr-namespace:TextEditLib.Helpers;assembly=TextEditLib" 
        xmlns:MWindow="clr-namespace:MWindowLib;assembly=MWindowLib"
        xmlns:behav="clr-namespace:CSharpEditor.Behaviors"
        xmlns:conv="clr-namespace:CSharpEditor.Converters" 
        xmlns:textEditLibConv="clr-namespace:TextEditLib.Converters;assembly=TextEditLib"
        mc:Ignorable="d"
        Title="MainWindow" Height="450" Width="800">
    <Grid>
        <Grid.Resources>
            <conv:NullToVisibilityConverter x:Key="NullToVisibilityConverter"/>
            <textEditLibConv:BoolToStringPropConverter x:Key="OverStrikeModeConverter"
                                            TrueValue="Overwrite"
                                            FalseValue="Insert" />
            <BooleanToVisibilityConverter x:Key="BooleanToVisibilityConverter"/>
        </Grid.Resources>
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto" />
            <RowDefinition Height="*" />
        </Grid.RowDefinitions>
        <StackPanel
            Grid.Row="0"
            Margin="3"
            Orientation="Horizontal">
            <ComboBox Name="CmbThemeSelection"
                              Margin="3"
                              behav:SelectionChangedCommand.ChangedCommand="{Binding ThemeSelectionChangedCommand}"
                              DisplayMemberPath="Model.DisplayName"
                              HorizontalAlignment="Left"
                              VerticalAlignment="Center"
                              VerticalContentAlignment="Center"
                              HorizontalContentAlignment="Left"
                              IsEnabled="{Binding AppTheme.IsEnabled, Mode=OneWay, UpdateSourceTrigger=PropertyChanged}"
                              ItemsSource="{Binding AppTheme.ListOfThemes}"
                              SelectedItem="{Binding AppTheme.SelectedTheme, Mode=OneWay, UpdateSourceTrigger=PropertyChanged}"
                              ToolTip="Select a Theme"
                              Focusable="False"/>
            <ToolBarTray
                Grid.Row="1"
                VerticalAlignment="Center"
                SnapsToDevicePixels="True">
                <ToolBar
                    VerticalAlignment="Stretch"
                    SnapsToDevicePixels="True"
                    ToolBarTray.IsLocked="True">
                    <Button Content="{DynamicResource OpenFileIcon}"
                            ToolTip="Open File"
                            Margin="3"
                            HorizontalAlignment="Left"
                            VerticalAlignment="Stretch"
                            Command="{Binding Main.OpenFileCommand}"/>
                    <Separator Margin="3" />
                    <!--
                        The bindings for Cut, Copy, Paste, Delete, Undo, Redo below work only in a Menu or Toolbar
                        They can be implemented via seperate class eg.: 'ApplicationCommands.Cut'
                        but you will have to create that class to use the bindings somewhere else
                        https://stackoverflow.com/questions/7563666/copy-and-paste-commands-with-wpf-buttons
                    -->
                    <Button Content="{DynamicResource CopyIcon}"
                            ToolTip="Copy"
                            Margin="3,0"
                            HorizontalAlignment="Left"
                            VerticalAlignment="Center"
                            Command="Copy"/>
                    <Button Content="{DynamicResource CutIcon}"
                            ToolTip="Cut"
                            Margin="3,0"
                            HorizontalAlignment="Left"
                            VerticalAlignment="Center"
                            Command="Cut"/>
                    <Button Content="{DynamicResource PasteIcon}"
                            Margin="3,0"
                            HorizontalAlignment="Left"
                            VerticalAlignment="Center"
                            Command="Paste"
                            SnapsToDevicePixels="True"
                            ToolTip="Paste"/>
                    <Button Content="{DynamicResource DeleteIcon}"
                            ToolTip="Delete"
                            Margin="3,0"
                            HorizontalAlignment="Left"
                            VerticalAlignment="Center"
                            Command="Delete"/>
                    <Separator Margin="3" />
                    <Button Content="{DynamicResource UndoIcon}"
                            ToolTip="Undo"
                            Margin="3,0"
                            HorizontalAlignment="Left"
                            VerticalAlignment="Center"
                            Command="Undo"/>
                    <Button Content="{DynamicResource RedoIcon}"
                            ToolTip="Redo"
                            Margin="3,0"
                            HorizontalAlignment="Left"
                            VerticalAlignment="Center"
                            Command="Redo"/>
                    <Separator Margin="3" />
                    <Button Content="{DynamicResource RunIcon}"
                            ToolTip="Run"
                            Margin="3,0"
                            HorizontalAlignment="Left"
                            VerticalAlignment="Center"
                            Command="{Binding Main.RunScriptCommand}"/>
                    <Button Content="{DynamicResource StopIcon}"
                            ToolTip="Stop"
                            Margin="3,0"
                            HorizontalAlignment="Left"
                            VerticalAlignment="Center"
                            Command="{Binding Main.StopScriptCommand}"/>
                </ToolBar>
            </ToolBarTray>
            <ComboBox
                DataContext="{Binding Main.DocumentViewModel}"
                MinWidth="100"
                Margin="0,0,3,3"
                DisplayMemberPath="Name"
                HorizontalAlignment="Left"
                VerticalAlignment="Center"
                VerticalContentAlignment="Center"
                HorizontalContentAlignment="Left"
                behav:SelectionChangedCommand.ChangedCommand="{Binding HighlightingChangeCommand}"
                ItemsSource="{Binding HighlightingDefinitions, Mode=OneWay, UpdateSourceTrigger=PropertyChanged}"
                SelectedItem="{Binding HighlightingDefinition, UpdateSourceTrigger=PropertyChanged}"
                Visibility="{Binding HighlightingDefinition, Mode=OneWay, UpdateSourceTrigger=PropertyChanged, Converter={StaticResource NullToVisibilityConverter}}"
                />

        </StackPanel>
        <Grid xmlns:avalonEdit="http://icsharpcode.net/sharpdevelop/avalonedit"
              Grid.Row="1"
              Grid.Column="0"
              Grid.ColumnSpan="2">
            <Grid.Resources>
                <!--
                    This resource is necessary to make sure that AvalonEdit always has valid options
                    (even when there is no document if options bound to the editor control)
                -->
                <avalonEdit:TextEditorOptions x:Key="TextEditOptions"/>
            </Grid.Resources>
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="297*"/>
                <ColumnDefinition Width="503*"/>
            </Grid.ColumnDefinitions>
            <Grid.RowDefinitions>
                <RowDefinition Height="*" />
                <RowDefinition Height="100" />
            </Grid.RowDefinitions>
            <textEditLib:TextEdit Grid.Row="0" 
                                  Name="textEditor"
                                  DataContext="{Binding Main.DocumentViewModel}"
                                  Document="{Binding Document}"
                                  Options="{Binding TextOptions, FallbackValue={StaticResource TextEditOptions}}"
                                  SyntaxHighlighting="{Binding HighlightingDefinition, Mode=OneWay, UpdateSourceTrigger=PropertyChanged}"
                                  FontFamily="Consolas"
                                  FontSize="{Binding Path=SizeUnitLabel.ScreenPoints, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
                                  Column="{Binding SynchronizedColumn,Mode=OneWayToSource, UpdateSourceTrigger=PropertyChanged}"
                                  Line="{Binding SynchronizedLine,Mode=OneWayToSource, UpdateSourceTrigger=PropertyChanged}"
                                  LineNumbersForeground="#2B91AF"
                                  ShowLineNumbers="True" Grid.ColumnSpan="2">
                <avalonEdit:TextEditor.ContextMenu>
                    <ContextMenu>
                        <MenuItem Command="Cut" Header="Cut" Icon="{DynamicResource CutIcon}"/>
                        <MenuItem Command="Copy" Header="Copy" Icon="{DynamicResource CopyIcon}"/>
                        <MenuItem Command="Paste" Header="Paste" Icon="{DynamicResource PasteIcon}"/>
                        <MenuItem Command="Delete" Header="Delete" Icon="{DynamicResource DeleteIcon}"/>
                        <Separator />
                        <MenuItem Command="Undo" Header="Undo" Icon="{DynamicResource UndoIcon}"/>
                        <MenuItem Command="Redo" Header="Redo" Icon="{DynamicResource RedoIcon}"/>
                        <Separator/>
                        <MenuItem Command="{x:Static aeditCmd:AvalonEditCommands.DeleteLine}"
                                  Header="Delete Line"
                                  ToolTip="Delete the current text line" />
                        <MenuItem Header="White Spaces">
                            <MenuItem Command="{x:Static aeditCmd:AvalonEditCommands.RemoveLeadingWhitespace}"
                                      Header="Remove Leading White Spaces" />
                            <MenuItem Command="{x:Static aeditCmd:AvalonEditCommands.RemoveTrailingWhitespace}"
                                      Header="Remove Trailing White Spaces" />
                            <MenuItem Command="{x:Static aeditCmd:AvalonEditCommands.ConvertTabsToSpaces}"
                                Header="Convert Tabs To Spaces" />
                            <MenuItem Command="{x:Static aeditCmd:AvalonEditCommands.ConvertSpacesToTabs}"
                                      Header="Convert Spaces To Tabs" />
                            <MenuItem Command="{x:Static aeditCmd:AvalonEditCommands.ConvertLeadingTabsToSpaces}"
                                      Header="Convert Leading Tabs To Spaces" />
                            <MenuItem Command="{x:Static aeditCmd:AvalonEditCommands.ConvertLeadingSpacesToTabs}"
                                      Header="Convert Leading Spaces To Tabs" />
                        </MenuItem>
                        <MenuItem Header="Text Case">
                            <MenuItem Command="{x:Static aeditCmd:AvalonEditCommands.ConvertToUppercase}"
                                      Header="Convert Text To Upper Case" />
                            <MenuItem Command="{x:Static aeditCmd:AvalonEditCommands.ConvertToLowercase}"
                                      Header="Convert Text To Lower Case" />
                            <MenuItem Command="{x:Static aeditCmd:AvalonEditCommands.ConvertToTitleCase}"
                                      Header="Convert Text To Title Case" />
                            <MenuItem Command="{x:Static aeditCmd:AvalonEditCommands.InvertCase}"
                                      Header="Invert Text Case" />
                        </MenuItem>
                        <!--MenuItem Command="{x:Static aeditCmd:AvalonEditCommands.IndentSelection}"
                            Header="Apply Text Indentation Strategy" /-->
                        <MenuItem Command="{x:Static textEditLibCmd:TextEditCommands.FoldsCollapseAll}"
                                  Header="Collapse Text Foldings" />
                        <MenuItem Command="{x:Static textEditLibCmd:TextEditCommands.FoldsExpandAll}"
                                  Header="Expand Text Foldings" />
                    </ContextMenu>
                </avalonEdit:TextEditor.ContextMenu>
            </textEditLib:TextEdit>
            <TextBlock 
                       Grid.Row="1"
                       Text="{Binding Main.Result}"
                       TextWrapping="Wrap"
                       Background="#FF2D2D30"
                       Foreground="White" Grid.ColumnSpan="2" Margin="0,295,0,0" Grid.RowSpan="2"/>
        </Grid>
    </Grid>
</MWindow:MetroWindow>
